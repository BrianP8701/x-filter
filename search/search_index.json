{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"X-filter","text":"<p>generate reports based on very specific criteria or find people with highly specific sets of skills and beliefs using x's api</p> <p>lets try to win</p>"},{"location":"development/","title":"Development","text":"<p>We'll use this part of the docs to communicate and coordinate.</p>"},{"location":"development/design/","title":"Design","text":""},{"location":"development/design/#ux","title":"UX","text":"<p>I initially proposed we have our interface in X where we create a bot account on X and allow users to interact with their x_filter by messaging the bot. We could do this, but we also could just do a CLI based interface. i think we should do a CLI interface to make this as easy as possible. but what do u think?</p>"},{"location":"development/design/#database","title":"Database","text":"<p>We use sqlite in a key value style for development speed</p>"},{"location":"development/design/#backend","title":"Backend","text":"<p>its super simple rn. a single route for message events to come. copilot conversates with the user to confirm what it should do and then it runs.</p> <p>later we can add scheduling, allowing a user to have multiple scehduled things and potentially using x dms instead of cli</p>"},{"location":"development/todo/","title":"Todo","text":"<p>I need these questions answered and these tasks done:</p> <p>Questions:</p> <ul> <li>[ ] What exactly is filter stream in x api v2?</li> <li>[ ] What features and things can we do in tweet search? </li> <li>[ ] What other features might be useful?</li> <li>[ ] Decide on what the UX should be. CLI or X DMs? I think the interface isn't as important and it'd be better if we focus on capabilities and reliability</li> </ul> <p>Tasks:</p> <ul> <li>[ ] On your own figure out and get some basic successful api calls</li> <li>[ ] Implement the XWrapper class. make all api calls async methods. Add docstrings in each method. Add unit tests.</li> </ul>"},{"location":"development/brian/","title":"Brian's Bio","text":"<p>journal thingy</p> <p>okay so we're going to have two types of interfaces into using xfilter.</p> <p>the first option is a conversational workflow where the ai extracts the filter things from the convo as well as guides the user through the primary prompt, filter prompt and report guide. most importantly the bot can help u refine your prompts here</p> <p>the second option is an interface where u can skip the conversation and directly set the parameters</p>"},{"location":"getting_started/","title":"X-filter","text":"<p>Welcome.</p> <p>The \"Getting Started\" section includes introductory information. The \"Development\" section covers technical details, design aspects, and is a place for us to communicate. The \"Product\" section outlines the product specifications, user experience goals, and the problems we aims to solve.</p>"},{"location":"getting_started/organization/","title":"Organization","text":"<p>This section outlines the repository's file structure.</p>"},{"location":"getting_started/organization/#apppy","title":"app.py","text":"<ul> <li>Purpose: The entry point to run the application.</li> </ul>"},{"location":"getting_started/organization/#x","title":"x","text":"<ul> <li>Description: Houses the Pythonic wrapper for the X API. </li> <li>Note: Feel free to add new files to prevent the wrapper file from becoming overly lengthy.<ul> <li>wrapper.py: Implements the <code>XWrapper</code> class.</li> </ul> </li> </ul>"},{"location":"getting_started/organization/#ai","title":"ai","text":"<ul> <li>Description: Contains the logic and system for the AI agent.</li> </ul>"},{"location":"getting_started/organization/#data","title":"data","text":"<ul> <li>Description: Hosts databases and data models essential for the application.<ul> <li>database.py: Features an abstract base class for the database and a concrete SQLite implementation.</li> <li>types.py: Defines types that are not models.</li> <li>models: Stores the data models utilized in the application, with each model corresponding to a table in the SQLite database.</li> </ul> </li> </ul>"},{"location":"getting_started/organization/#-userpy-user-data-model","title":"- user.py: User data model.","text":""},{"location":"getting_started/setup/","title":"Setup Instructions","text":"<p>Follow these steps to set up your development environment:</p> <ol> <li>Clone the Repository: Clone the repository to your local machine.</li> <li>Navigate to Repository: Open your terminal and change the current working directory (cwd) to the root of the cloned repository.</li> <li>Install and Activate Poetry Environment:</li> <li>Run <code>poetry install</code> to install dependencies.</li> <li>Activate the poetry environment by running <code>poetry shell</code>.</li> <li>Retrieve the path to the Python interpreter with <code>which python</code> and set it accordingly.</li> </ol> <p>Note: Ensure all imports are made relative to the root of the repository throughout the development process.</p>"},{"location":"getting_started/usage/","title":"Usage","text":"<p>This document outlines two primary ways to use the application:</p> <ol> <li> <p>Hosting the Application: Run <code>uvicorn x_filter.app:app --reload</code> to start the app.</p> </li> <li> <p>Sending Events: Utilize the provided script within the <code>scripts</code> directory to simulate sending events to the application.</p> </li> </ol> <p>Should you need to edit the documentation, feel free to make changes. Please ensure that any additions or relocations of files within the documentation are accurately reflected in the <code>mkdocs.yml</code> file, specifically within the <code>nav</code> attribute. To run the documentation locally with ease, execute <code>mkdocs serve</code>. Note: If you encounter issues with Cairo despite it being installed, running <code>export DYLD_FALLBACK_LIBRARY_PATH=/usr/local/lib:/opt/homebrew/lib</code> in the terminal typically resolves the problem.</p>"},{"location":"product/","title":"Product","text":"<p>In this section we'll clearly describe: 1. What this product aims to solve and what makes it different 2. The user experience</p> <p>im looking for competitors to my startup idea. real estate agents do a lot of repetitive - automatable work. using handcrafted LLM chains connected to CRMS and various tools, a lot of their work can be automated. for example, u can automate the gathering of data and the filling out of paperwork at various stages, generic emails, marketing, social media posts, listing descriptions. So yeah, can u find people who are working on very similar stuff?</p> <p>i want tweets on the topic of agentic rag (retrieval augmented generation). Im particularly interested smth that can take in data and autonomously organize it into a file structure/tree and also update, search and optimize it. i want to see people who are doing specifically this</p>"},{"location":"product/goal/","title":"Goal","text":"<p>Recommendation systems are great and powerful. I just find a few issues with them.  </p>"}]}