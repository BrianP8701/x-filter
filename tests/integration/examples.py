# tests/integration/examples.py
"""
This module contains requests we want the system to be able to handle. It'll help guide us in the development of the system.
Feel free to add your own requests here.

btw u can press option+z to wrap text in vscode
"""

# Simple base tests
simple_test = """summarize {somebody}'s most recent tweet"""
simple_test_2 = """{tweet_id} can you summarize this tweet? explain it simply for me like im 5"""

# Report requests
andrej_kaparthy_reports = """Can you please send me a concise report of insights and ideas from Andrej Kaparthy every week? Im primarily interested in technical things"""



# Brian's requests
rag_developments_reports = """Im very interested in RAG. Im already familiar with lots of methods. Most modern RAG consists of indexing data into a vector database and doing similarity search over this, with tons of optimizations happening all the time. for example, data needs to be extracted and then also "chunked" which means split into smaller pieces. this sounds simple but is actually complex. with code you can chunk by abstract syntax tree parsing, splitting by functions or classes. but in a book or something its not clear. you can split by empty line, but that doesent always work because maybe you seperated two closely related paragraphs etc. i have not seen a solution to this, and i suspect there wont be a general chunking method without agents. in addition, given a question doing vector similarity doesent always point to the related answer. its actually stupid to search docs with vector similarity using a question. you want to navigate the sections of the documentation to get to ur answer. i think vector similarity has its uses but is not a scalable solution. i think the solution is to take a very agentic approach to rag. for example. you have a memory metadata tree. you first insert a repository of code and documentation into this tree. every node in the tree has a description explaining what that node is. when a question comes in an agent will start from the root of the tree and look at descriptions of child nodes to decide what node to navigate to. now in this case itll land on the documentation or repository node. but it cant retrieve that, now it begins dynamizally breaking up the data on the spot. different types of data have diiferent actions we can perform on them to break them up. we can do abstract syntax tree parsing to find something we want in the repo, keyword search in the docs or repo, or vector similarity on the docs. the agent searches the nodes for the answer and returns it. now those nodes are partially broken up and all the actions it performed searching are saved as child nodes with edges being the action performed to get that child node. in this manner the data is intelligently chunked. I think that this is a scalable solution. trees are O(logn). please find and generate weekly reports for me on anything close to this topic. find people who are working on something similar. and not just people talking about it but people who achieve results and that have genuine insights. im not looking for people who preach abt how important smth is, im looking for reports that share real insights and solutions in this problem space as well as people who are working on it"""
find_competitors = """Im building a copilot for real estate agents. the website contains a chat page, data page, actions page, then settings and profile. the data page shows all the data the system has access to. the real estate agents leads, transactions, people she works with, paperwork etc. the actions shows proposed actions by the copilot that the agent has to approve or deny, or suggest changes to, to which the copilot will make a new action request for approval. the copilot has access to the agents email, a twilio phone number, data sources and various tools. in the actions page you can help build some of the actions. for example we can automate paperwork transactions. label all the fields in the paperwork following and reusing labels from the dictionary so that the same fields get repopulated from the CRM. in doing so, in a workflow you can now say at this stage this paperwork has to be filled out, which will have the LLM send the paperwork to the person to be filled out, and will also save the data to be autofilled to make everyones experienve easier. or the agent can also directly say in the chat page, fill out paperwork x in transaction y. we can also define drip campaigns, and automate other things which ill add in the future. what i want you to do is twofold:
- find competitors to this specific system. automation of real estate agent tasks. i dont want you to find competitors to the CRM or the LLM. i want you to find competitors to the copilot specifically for real estate agents
- find people and companies using a similar system. i suspect this can be generalized and that might kill my chance at this. i also can learn things from them. something specifically like the system i described
"""
